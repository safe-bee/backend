// Comando para formatear este documento:
// npx prisma format

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  profile Profile?
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model Apiario {
  id             Int          @id @default(autoincrement())
  nombre         String
  fecha_creacion DateTime     @default(now())
  latitud        Float
  longitud       Float
  direccion      String
  tipo_ambiente  TipoAmbiente
  colmenas       Colmena[]
}

enum TipoAmbiente {
  RURAL
  SUBURBANO
  URBANO
}

model Colmena {
  id                          Int            @id @default(autoincrement())
  nombre                      String
  apiario                     Apiario        @relation(fields: [apiarioId], references: [id])
  apiarioId                   Int
  tipo                        TipoColmena
  datos_total_cuadros         String?
  datos_color                 String?
  datos_origen                OrigenColmena?
  datos_fecha_establecimiento DateTime?      @default(now())
  reina_tipo                  TipoReina?
  reina_color                 ColorReina?
  reina_fecha_aceptacion      DateTime?
  reina_notas                 String?        @db.VarChar(200)
  foto1                       String?
  foto2                       String?
  foto3                       String?
  tareas                      Tarea[]
  registros                   Registro[]
}

enum TipoColmena {
  HORIZONTAL
  LANGSTROTH
  NUCLEO
  TOPBAR
  TRADICIONAL
  TRANSICIONAL
  WARRE
}

enum OrigenColmena {
  ENJAMBRE
  NUCLEO
  SPLIT
  OBTENIDO
}

enum TipoReina {
  LOCAL
  ITALIANA
  RUSA
  CARNIOLA
  CAUCASICA
  BUCKFAST
  ARPATIANA
}

enum ColorReina {
  BLANCO
  AMARILLO
  ROJO
  VERDE
  AZUL
}

model Zona {
  id          Int          @id @default(autoincrement())
  nombre      String       @unique
  coordenadas Coordenada[]
}

model Coordenada {
  id     Int   @id @default(autoincrement())
  coord1 Float
  coord2 Float
  zona   Zona  @relation(fields: [zonaId], references: [id])
  zonaId Int
}

model Tarea {
  id           Int          @id @default(autoincrement())
  descripcion  String       @db.VarChar(200)
  fecha        DateTime     @default(now())
  colmena      Colmena      @relation(fields: [colmenaId], references: [id])
  colmenaId    Int
  terminada    Boolean      @default(false)
  tipoRegistro TipoRegistro
  registro     Registro?
}

model Registro {
  id                   Int                   @id @default(autoincrement())
  fecha                DateTime              @default(now())
  colmena              Colmena               @relation(fields: [colmenaId], references: [id])
  colmenaId            Int
  tipoRegistro         TipoRegistro
  tarea                Tarea?                @relation(fields: [tareaId], references: [id])
  tareaId              Int?                  @unique
  notas                String?
  inspeccion           Inspeccion?
  registroAlimentacion RegistroAlimentacion?
  registroTratamiento  RegistroTratamiento?
  registroCosecha      RegistroCosecha?
  registroVarroa       RegistroVarroa?
  registroCuadros      RegistroCuadros?
  // registroHibernacion  RegistroHibernacion?
  // registroMuerte       RegistroMuerte?
}

enum TipoRegistro {
  TRATAMIENTO
  COSECHA
  ALIMENTACION
  CAMBIO_DE_CUADROS
  VARROA
  HIBERNACION
  MUERTE
  INSPECCION
}

model RegistroAlimentacion {
  registro             Registro @relation(fields: [registroId], references: [id], onDelete: Cascade)
  registroId           Int      @id
  alimento             String?
  cantidadAlimentacion Float
}

model RegistroTratamiento {
  registro   Registro  @relation(fields: [registroId], references: [id], onDelete: Cascade)
  registroId Int       @id
  tipoPlaga  TipoPlaga
  producto   String?
  dosis      String?
}

enum TipoPlaga {
  VARROA
  NOSEMA
  POLILLAS
  OTRAS
}

model RegistroCosecha {
  registro        Registro   @relation(fields: [registroId], references: [id], onDelete: Cascade)
  registroId      Int        @id
  tipoUnidad      TipoUnidad
  cantidadCosecha Float
}

enum TipoUnidad {
  LIBRAS
  KILOS
  CUADROS
}

model RegistroVarroa {
  registro   Registro   @relation(fields: [registroId], references: [id], onDelete: Cascade)
  registroId Int        @id
  tipoMetodo TipoMetodo
  porcentaje Float
}

enum TipoMetodo {
  ALCOHOL
  DETERGENTE
  AZUCAR
  OTRO
}

model RegistroCuadros {
  registro   Registro @relation(fields: [registroId], references: [id], onDelete: Cascade)
  registroId Int      @id
  cantidad   Int
}

model Inspeccion {
  registro             Registro @relation(fields: [registroId], references: [id], onDelete: Cascade)
  registroId           Int      @id
  clima                Clima?
  temperatura          Int?
  estado_cajon         Boolean
  detalle_cajon        String
  estado_poblacion     Boolean
  detalle_poblacion    String
  estado_reina_larvas  Boolean
  detalle_reina_larvas String
  estado_flora         Boolean
  detalle_flora        String
  estado_alimento      Boolean
  detalle_alimento     String
  estado_plagas        Boolean
  detalle_plagas       String
  foto_inspeccion      String?
}

enum Clima {
  SOLEADO
  NUBLADO
  TORMENTA
  LLUVIA
}
