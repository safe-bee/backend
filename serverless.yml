# NOTE: update this with your service name
service: eztrainer-backend

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

disabledDeprecations:
  - "*" # To disable all deprecation messages

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  profile: default
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #
  environment:
    PG_HOST: ${env:PG_HOST}
    PG_DB_NAME: ${env:PG_DB_NAME}
    PG_USER: ${env:PG_USER}
    PG_PASSWORD: ${env:PG_PASSWORD}
    PG_PORT: ${env:PG_PORT}
    tableName: notes

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  graphql:
    handler: src/index.graphqlHandler
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
          cors: true

  create:
    handler: src/lambda/create.main
    events:
      - http:
          path: notes
          method: post

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: src/lambda/get.main
    events:
      - http:
          path: notes/{id}
          method: get

  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: src/lambda/list.main
    events:
      - http:
          path: notes
          method: get

  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: src/lambda/update.main
    events:
      - http:
          path: notes/{id}
          method: put

  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: src/lambda/delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
